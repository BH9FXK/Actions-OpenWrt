#
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt HC5611

on:
  schedule:
    - cron: '2 2 * * 2,5'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  #FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: hc5611.config
  DIY_P1_SH: hc5611-diy-part1.sh
  DIY_P2_SH: hc5611-diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  prepare:
    name: Prepare HiWiFi HC5611
    runs-on: ubuntu-22.04
    
    outputs:
      REVISION: ${{ steps.kernel.outputs.REVISION }}
      KERNEL: ${{ steps.kernel.outputs.KERNEL }}

    steps:
      - name: Show prepare information
        run: |
          cat <<EOF | sed -E 's/^  //' >> $GITHUB_STEP_SUMMARY
            #### Sources
            Time: $(date +"%Y-%m-%d %H:%M %A")
            Router Model: HiWiFi HC5611
            Config File: $CONFIG_FILE
            Script Files: $DIY_P1_SH $DIY_P2_SH
            Openwrt Source: $REPO_URL
            Upload Firware: $UPLOAD_FIRMWARE
            Upload Release: $UPLOAD_RELEASE
            Upload Bin: $UPLOAD_BIN_DIR
          EOF

      - name: Checkout
        uses: actions/checkout@v3

      - name: Git Clone source code
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
    
      - name: Query kernel and revision
        id: kernel
        run: |
          cd openwrt
          echo "REVISION=$(grep 'DISTRIB_REVISION=' package/lean/default-settings/files/zzz-default-settings | awk -F \' '{print $2}')" >> $GITHUB_OUTPUT
          TESTING_KERNEL=$(grep CONFIG_TESTING_KERNEL $GITHUB_WORKSPACE/hc5611.config | awk -F= '{print $2}')
          if [ "$TESTING_KERNEL" == "y" ]; then
            echo "KERNEL=$(grep LINUX_KERNEL_HASH include/kernel-5.10 | awk -F '[-,=]' '{print $2}')" >> $GITHUB_OUTPUT
          else
            echo "KERNEL=$(grep LINUX_KERNEL_HASH include/kernel-5.4 | awk -F '[-,=]' '{print $2}')" >> $GITHUB_OUTPUT
          fi
          
      - name: Show kernel and revision
        run: |
          cat <<EOF | sed -E 's/^  //' >> $GITHUB_STEP_SUMMARY
            #### Kernel and Revision
            固件版本: ${{ steps.kernel.outputs.REVISION }}
            内核版本: ${{ steps.kernel.outputs.KERNEL }}
          EOF

  build:
    name: Build HiWiFi HC5611
    needs: prepare
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: 清理Docker镜像和软件包
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        docker rmi `docker images -q`
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
    
    - name: 安装依赖软件包
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        echo "---------install依赖包-------------"
        sudo -E apt-get -y install $(cat $GITHUB_WORKSPACE/depends-ubuntu)
        echo "---------dist-upgrade--------------"
        sudo -E apt-get -y dist-upgrade
        
    - name: 清理空间
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |  
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        
    - name: Set Timezone
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        
    - name: Clone source code
      run: |
        df -h
        echo "SPACE_A=$(df / | grep '/' | awk '{print $4}')" >> $GITHUB_ENV
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
       #[ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        #[ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "IPADD=$(grep "lan)" package/base-files/files/bin/config_generate | awk -F "\"" '{print $2}')" >> $GITHUB_ENV
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: |
        cd openwrt
        df -h
        echo "SPACE_B=$(df / | grep '/' | awk '{print $4}')" >> $GITHUB_ENV
        echo "-----------OpenWrt编译目录----------"
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        #
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Show build information
      run: |
        df -h /
        cat <<EOF | sed -E 's/^  //' >> $GITHUB_STEP_SUMMARY
          #### Firmware Information
          Time: $(date +"%Y-%m-%d %H:%M %A")
          文件名称: OpenWrt${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          Version: $(cat ${{ env.FIRMWARE }}/version.buildinfo)
          网关地址: $IPADD
          Build Used: $(echo $[($SPACE_A-$SPACE_B) / 1024000])G
          Space: $(df -h / | awk '{print $2}' | tr "\n" ":" | sed -e 's/:$/\n/') $(df -h / | awk '{print $3}' | tr "\n" ":" | sed -e 's/:$/\n/')  $(df -h / | awk '{print $4}' | tr "\n" ":"|sed -e 's/:$/\n/')
          固件目录：$FIRMWARE
          Bin Files:
          $(ls openwrt/bin/targets/*/*)
        EOF
        
    - name: Upload bin directory
      uses: actions/upload-artifact@v3
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Upload firmware directory
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")${{ env.DEVICE_NAME }}" >> $GITHUB_OUTPUT
        touch release.txt
        
        cat <<EOF | sed -E 's/^  //' >> release.txt
          OpenWrt for HiWiFi HC5611
          固件版本: ${{ needs.prepare.outputs.REVISION }} 内核版本: ${{ needs.prepare.outputs.KERNEL }}
          网关地址: $IPADD
          Version: $(cat ${{ env.FIRMWARE }}/version.buildinfo)
        EOF
        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

  delete:
    name: Delete old workflow
    needs: [ prepare, build ]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 2

    - name: Delete old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
